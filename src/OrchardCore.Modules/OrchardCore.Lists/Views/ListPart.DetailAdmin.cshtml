@using OrchardCore.Lists.ViewModels
@using System.Globalization
@using OrchardCore.Localization
@model OrchardCore.Lists.ViewModels.ListPartViewModel

@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager
@{
    var enableOrdering =
        Model.EnableOrdering &&
        Model.ContentItems.Count() > 1 &&
        Model.ListPartFilterViewModel.Status == ContentsStatus.Latest &&
        string.IsNullOrEmpty(Model.ListPartFilterViewModel.DisplayText);

    if (enableOrdering)
    {
        <script asp-src="~/OrchardCore.Lists/Scripts/ci-list-ordering.min.js" debug-src="~/OrchardCore.Lists/Scripts/ci-list-ordering.js" asp-name="ci-list-ordering" at="Foot" depends-on="sortable, jQuery"></script>
    }
}

@if (!Model.ContainedContentTypeDefinitions.Any())
{
    <div class="alert alert-warning">
        <a asp-action="EditTypePart" asp-controller="Admin" asp-route-area="OrchardCore.ContentTypes" asp-route-id="@Model.ListPart.ContentItem.ContentType" asp-route-name="ListPart">@T["Please specify at least one contained content type."]</a>
    </div>
}
else
{
    <form>
        <div class="card mb-3 position-sticky action-bar">
            <div class="card-body bg-primary p-3">
                <div class="form-group mb-n1">
                    <div class="input-group input-group-sm w-50 d-inline-flex has-filter">
                        <div class="input-group-prepend">
                            <button class="btn btn-sm dropdown-toggle" style="border:1px solid lightgrey" type="button" data-toggle="dropdown" id="filter-dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fa fa-filter" title="@T["Filters"]"></i>
                            </button>
                            <div class="dropdown-menu @if (CultureInfo.CurrentUICulture.IsRightToLeft()) {<text>dropdown-menu-right</text>}" aria-labelledby="filter-dropdown">
                                @* Latest not surfaced here to be consistent with the main content items list filter. *@
                                <a class="dropdown-item" href="?Status=Draft">@T["Only draft items"]</a>
                                <a class="dropdown-item" href="?Status=Published">@T["Only published items"]</a>
                                <a class="dropdown-item" href="?Status=Owner">@T["Owned by me"]</a>
                            </div>
                        </div>
                        <i class="fa fa-search form-control-feedback"></i>
                        <input name="@nameof(ListPartFilterViewModel.Status)" value="@Model.ListPartFilterViewModel.Status" class="form-control" type="hidden" />
                        <input name="@nameof(ListPartFilterViewModel.DisplayText)" value="@Model.ListPartFilterViewModel.DisplayText" class="form-control" placeholder="@T["Search"]" type="search" autofocus />
                    </div>

                    <div class="form-group d-inline-flex float-right mb-0">
                        <div class="float-right">
                            @if (Model.ContainedContentTypeDefinitions.Count() == 1)
                            {
                                var contentTypeDefinition = Model.ContainedContentTypeDefinitions.FirstOrDefault();
                                <a class="btn btn-sm btn-primary" edit-for="@Model.ListPart.ContentItem" asp-route-returnUrl="@FullRequestPath">
                                    @T["Edit {0}", @Model.ListPart.ContentItem.DisplayText]
                                </a>
                                <a class="btn btn-sm btn-success" asp-action="Create" asp-controller="Admin" asp-route-id="@contentTypeDefinition.Name" asp-route-area="OrchardCore.Contents" asp-route-ListPart.ContainerId="@Model.ListPart.ContentItem.ContentItemId" asp-route-ListPart.ContentType="@contentTypeDefinition.Name" asp-route-ListPart.EnableOrdering="@Model.EnableOrdering" asp-route-returnUrl="@FullRequestPath">
                                    @T["Create {0}", contentTypeDefinition.DisplayName]
                                </a>
                            }
                            else
                            {
                                <a class="btn btn-sm btn-primary" edit-for="@Model.ListPart.ContentItem" asp-route-returnUrl="@FullRequestPath">
                                    @T["Edit {0}", @Model.ListPart.ContentItem.DisplayText]
                                </a>
                                <a class="btn btn-sm btn-success dropdown-toggle" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @T["Create"]
                                </a>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                    @foreach (var containedContentTypeDefinition in Model.ContainedContentTypeDefinitions)
                                    {
                                        <a class="dropdown-item" asp-action="Create" asp-controller="Admin" asp-route-id="@containedContentTypeDefinition.Name" asp-route-area="OrchardCore.Contents" asp-route-ListPart.ContainerId="@Model.ListPart.ContentItem.ContentItemId" asp-route-ListPart.ContentType="@containedContentTypeDefinition.Name" asp-route-ListPart.EnableOrdering="@Model.EnableOrdering" asp-route-returnUrl="@FullRequestPath">
                                            @containedContentTypeDefinition.DisplayName
                                        </a>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    @if (Model.ContentItems.Any())
    {
        <ul class="list-group" @if (enableOrdering) { <text> id="ci-sortable" </text> }>

            @foreach (var contentItem in Model.ContentItems)
            {
                var contentItemSummary = (dynamic)await ContentItemDisplayManager.BuildDisplayAsync(contentItem, Model.Context.Updater, "SummaryAdmin", Model.Context.GroupId);
                if (enableOrdering)
                {
                    contentItemSummary.Selectors.Add(await New.ListPart_Sortable());
                }
                <li class="list-group-item">
                    @await DisplayAsync(contentItemSummary)
                </li>
            }
        </ul>

        @await DisplayAsync(Model.Pager)
        @if (enableOrdering)
        {
            <div id="ordering-url" class="d-none" data-url="@Url.Action("UpdateContentItemOrders", "Order", new { area = "OrchardCore.Lists" })" />
            <div id="container-id" class="d-none" data-id="@Model.ListPart.ContentItem.ContentItemId" />
            <div id="pager-before" class="d-none" data-before="@Model.Pager.Before" />
            <div id="pager-after" class="d-none" data-after="@Model.Pager.After" />
            <div id="pager-pagesize" class="d-none" data-pagesize="@Model.Pager.PageSize" />
            <div id="update-order-error-message" class="d-none" data-message="@T["There was an error when updating the order of the items."]" />
        }
    }
    else
    {
        <p class="alert alert-warning">@T["The list is empty."]</p>
    }
}
